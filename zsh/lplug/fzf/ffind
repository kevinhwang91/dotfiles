emulate -L zsh

local s_path level
local only_dir
while getopts ':dl:s:' opt; do
    case $opt in
    d)
        only_dir=1
        ;;
    l)
        level=$OPTARG
        ;;
    s)
        s_path=$OPTARG
        ;;
    \?)
        echo "Invalid option -$OPTARG." >&2
        ;;
    esac
done

local fzf_opts="--height=60% --reverse -m --tiebreak=end"

if (( $+commands[fd] )); then
    local cmd="command fd -L . $s_path --min-depth 1 ${level:+--max-depth $level} -H -E '.git*'"
    if [[ $only_dir ]]; then
        cmd="$cmd --type d"
    fi
    local fzf_opts="$fzf_opts --bind=alt-i:reload($cmd),alt-o:reload($cmd -I)"
else
    local cmd="command find -L ${s_path:-.} -mindepth 1 ${level:+-maxdepth $level} \
    \\( -path '*/\\.git' \
    -o -fstype 'sysfs' \
    -o -fstype 'devfs' \
    -o -fstype 'devtmpfs' \
    -o -fstype 'proc' \\) -prune \
    -o -type d -print"

    if [[ -z $only_dir ]]; then
        cmd="$cmd -o -type f -print -o -type l -print"
    fi

    cmd="$cmd 2>/dev/null"

    if [[ -z $s_path || $s_path == '.' ]]; then
        cmd="$cmd | cut -b3-"
    fi
fi

local fzf_preview_cmd='
    t=${$(readlink {}):-{}}
    if [[ $(file -i $t) =~ directory ]]; then
        (exa --color=always -T -L 1 {} ||
            tree -C -L 1 {} ||
            echo {} is a directory.) 2>/dev/null
    elif [[ $(file -i $t) =~ binary ]]; then
        echo {} is a binary file.
    else
        (bat --color=always --style=plain --theme=TwoDark -n -- {} ||
            cat {}) 2>/dev/null
    fi
'

local -a ret_array
local ret=0

eval $cmd | $FZF_CMD ${(z)fzf_opts} --preview=$fzf_preview_cmd ${(z)EXTRA_OPTS} | {
    while read item; do
        print -n "${(q)item} "
    done
} | sed -E '$s/ $//'

ret_array=($pipestatus)
# ignore find command error code 1 such as loop detect or permission
if (( $ret_array[1] == 1 )); then
    ret=0
fi
local p_ret
for p_ret in $ret_array[2,-1]; do
    if (( p_ret )); then
        ret=$p_ret
    fi
done
return $ret
