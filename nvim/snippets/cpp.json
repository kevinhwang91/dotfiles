{
	"enum class": {
		"prefix": "enumc",
		"body": ["enum class ${MyClass} { };"],
		"description": "Code snippet for enum class (c++11)"
	},
	"class": {
		"prefix": "class",
		"body": [
			"class ${MyClass}",
			"{",
			"public:",
			"\t${MyClass}();",
			"\t${MyClass}(${MyClass} &&) = default;",
			"\t${MyClass}(const ${MyClass} &) = default;",
			"\t${MyClass} &operator=(${MyClass} &&) = default;",
			"\t${MyClass} &operator=(const ${MyClass} &) = default;",
			"\t~${MyClass}();",
			"",
			"private:",
			"\t$1",
			"};",
			"",
			"${MyClass}::${MyClass}()",
			"{",
			"}",
			"",
			"${MyClass}::~${MyClass}()",
			"{",
			"}"
		],
		"description": "Code snippet for class"
	},
	"classi": {
		"prefix": "classi",
		"body": [
			"class ${MyClass}",
			"{",
			"public:",
			"\t${MyClass}() = default;",
			"\t${MyClass}(${MyClass} &&) = default;",
			"\t${MyClass}(const ${MyClass} &) = default;",
			"\t${MyClass} &operator=(${MyClass} &&) = default;",
			"\t${MyClass} &operator=(const ${MyClass} &) = default;",
			"\t~${MyClass}() = default;",
			"",
			"private:",
			"\t$1",
			"};"
		],
		"description": "Code snippet for class with inline constructor/destructor"
	},
	"interface": {
		"prefix": "interface",
		"body": ["__interface I${Interface}", "{", "\t$1", "};"],
		"description": "Code snippet for interface (Visual C++)"
	},
	"namespace": {
		"prefix": "namespace",
		"body": ["namespace ${MyNamespace}", "{", "\t$1", "}"]
	},
	"try": {
		"prefix": "try",
		"body": ["try", "{", "\t", "}", "catch (const std::exception&)", "{", "\t$1", "}"],
		"description": "Code snippet for try catch"
	},
	"cout": {
		"prefix": "cout",
		"body": ["std::cout << \"${1:/* message */}\" << std::endl;"],
		"description": "Code snippet for printing to std::cout, provided the header is set"
	}
}
