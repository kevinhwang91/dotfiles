{
	"for": {
		"prefix": "for",
		"body": [
			"for (${1:size_t} ${2:i} = ${3:0}; $2 < ${4:length}; $2++) {",
			"\t$0",
			"}"
		],
		"description": "Code snippet for 'for' loop"
	},
	"forr": {
		"prefix": "forr",
		"body": [
			"for (${1:size_t} ${2:i} = ${3:length} - 1; $2 >= ${4:0}; $2--) {",
			"\t$0",
			"}"
		],
		"description": "Code snippet for reverse 'for' loop"
	},
	"while": {
		"prefix": "whi",
		"body": [
			"while ($1) {",
			"\t$0",
			"}"
		],
		"description": ""
	},
	"if": {
		"prefix": "if",
		"body": [
			"if ($1) {",
			"\t$0",
			"}"
		],
		"description": "Code snippet for if statement"
	},
	"else": {
		"prefix": "else",
		"body": [
			"else {",
			"\t$0",
			"}"
		],
		"description": "Code snippet for else statement"
	},
	"else if": {
		"prefix": "elseif",
		"body": [
			"else if ($1) {",
			"\t$0",
			"}"
		],
		"description": "Code snippet for else-if statement"
	},
	"enum": {
		"prefix": "enum",
		"body": [
			"enum ${MyEnum} {",
			"\t$0",
			"};"
		],
		"description": "Code snippet for enum"
	},
	"struct": {
		"prefix": "st",
		"body": [
			"struct ${1:Struct} {",
			"\t$0",
			"};"
		],
		"description": "Code snippet for struct"
	},
	"typedef struct": {
		"prefix": "tys",
		"body": [
			"typedef struct $1 {",
			"\t$0",
			"} ${2:name};"
		],
		"description": "Code snippet for struct"
	},
	"switch": {
		"prefix": "swi",
		"body": [
			"switch (${switch_on}) {",
			"default:",
			"\tbreak;$1",
			"}"
		],
		"description": "Code snippet for switch statement"
	},
	"union": {
		"prefix": "union",
		"body": [
			"union ${MyUnion} {",
			"\t$1",
			"};"
		],
		"description": "Code snippet for union"
	},
	"Do...while loop": {
		"prefix": "do",
		"body": [
			"do {",
			"\t$0",
			"} while ($1);"
		],
		"description": "Creates a do...while loop"
	},
	"Create linked list": {
		"prefix": "clist",
		"body": [
			"typedef struct node * Link;",
			"typedef struct node node;",
			"struct node {",
			"\tint value;",
			"\tLink next;",
			"};"
		],
		"description": "Creates a linked list template"
	},
	"Create function": {
		"prefix": "fun",
		"body": [
			"${1:void} ${2:func}($3) {",
			"\t$0",
			"}"
		],
		"description": "Creates a function that returns the type"
	},
	"Surround function": {
		"prefix": "sfun",
		"body": [
			"${1:void} ${2:func}($3) {",
			"\t$TM_SELECTED_TEXT",
			"\t$0",
			"}"
		],
		"description": "Surround a function that returns the type"
	},
	"Main": {
		"prefix": "main",
		"body": [
			"int main(int argc, char *argv[]) {",
			"\t$0",
			"\treturn 0;",
			"}"
		],
		"description": "Creates a main function that returns the type"
	},
	"Print variable": {
		"prefix": "pf",
		"body": [
			"printf(\"$1\"$0);"
		],
		"description": "Calls printf() to log value of variable of type"
	},
	"Allocate memory using calloc": {
		"prefix": "cal",
		"body": [
			"$1*ptr = ($1*)calloc($2, sizeof($1));",
			"",
			"if (ptr == NULL) {",
			"\tprintf(\"Memory allocation failed!\\n\");",
			"\texit(0);",
			"}",
			"",
			"free(ptr);"
		],
		"description": "Allocates memory to a pointer variable using calloc(), then deallocates using free()."
	}
}
