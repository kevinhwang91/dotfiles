{
	"#!/usr/bin/env python": {
		"prefix": "env",
		"body": "#!/usr/bin/env python\n$0",
		"description": "Adds shebang line for default python interpreter."
	},
	"# -*- coding=utf-8 -*-": {
		"prefix": "enc",
		"body": "# -*- coding=utf-8 -*-\n$0",
		"description": "set default python2.x encoding specification to utf-8 as it is mentioned in pep-0263."
	},
	"import": {
		"prefix": "im",
		"body": "import ${1:package/module}$0",
		"description": "Import a package or module"
	},
	"from ... import ...": {
		"prefix": "fim",
		"body": "from ${1:package/module} import ${2:names}$0",
		"description": "Import statement that allows individual objects from the module to be imported directly into the callerâ€™s symbol table."
	},
	"New class": {
		"prefix": "class",
		"body": "class ${1:ClassName}(${2:object}):\n\t\"\"\"${3:docstring for $1.}\"\"\"\n\tdef __init__(self, ${4:arg}):\n\t\t${5:super($1, self).__init__()}\n\t\tself.arg = arg\n\t\t$0",
		"description": "Code snippet for a class definition."
	},
	"New method": {
		"prefix": "defs",
		"body": "def ${1:mname}(self, ${2:arg}):\n\t${3:pass}$0",
		"description": "Code snippet for a class method definition."
	},
	"New function": {
		"prefix": "def",
		"body": "def ${1:fname}(${2:arg}):\n\t${3:pass}$0",
		"description": "Code snippet for function definition."
	},
	"New async function": {
		"prefix": "adef",
		"body": "async def ${1:fname}(${2:arg}):\n\t${3:pass}$0",
		"description": "Code snippet for async function definition."
	},
	"New property": {
		"prefix": "property",
		"body": "@property\ndef ${1:foo}(self):\n    \"\"\"${2:The $1 property.}\"\"\"\n    ${3:return self._$1}\n@${4:$1}.setter\ndef ${5:$1}(self, value):\n    ${6:self._$1} = value",
		"description": "New property: get and set via decorator"
	},
	"New froperty": {
		"prefix": "property",
		"body": "def ${1:foo}():\n    doc = \"${2:The $1 property.}\"\n    def fget(self):\n        ${3:return self._$1}\n    def fset(self, value):\n        ${4:self._$1 = value}\n    def fdel(self):\n        ${5:del self._$1}\n    return locals()\n$1 = property(**$1())$0",
		"description": ""
	},
	"try:except:": {
		"prefix": "try",
		"body": "try:\n\t${1:pass}\nexcept ${2:Exception} as ${3:e}:\n\t${4:raise $3}$0",
		"description": "Code Snippet for a try and except blocks."
	},
	"try:except:else:finally": {
		"prefix": "tryef",
		"body": "try:\n\t${1:pass}\nexcept${2: ${3:Exception} as ${4:e}}:\n\t${5:raise}\nelse:\n\t${6:pass}\nfinally:\n\t${7:pass}$0",
		"description": "Code Snippet for a try/except/finally with else statement."
	},
	"try:except:else": {
		"prefix": "trye",
		"body": "try:\n\t${1:pass}\nexcept ${2:Exception} as ${3:e}:\n\t${4:raise $3}\nelse:\n\t${5:pass}$0",
		"description": "Code Snippet for a try/except with else statement."
	},
	"try:except:finally": {
		"prefix": "tryf",
		"body": "try:\n\t${1:pass}\nexcept ${2:Exception} as ${3:e}:\n\t${4:raise $3}\nfinally:\n\t${5:pass}$0",
		"description": "Code Snippet for a try/except/finally."
	},
	"self": {
		"prefix": ".",
		"body": "self.$0",
		"description": "Shortend snippet to reference the self property in an object."
	},
	"__magic__": {
		"prefix": "__",
		"body": "__${1:init}__$0",
		"description": "Code snippet to create magic methods."
	},
	"if __name__ == \"__main__\"": {
		"prefix": "ifmain",
		"body": "if __name__ == \"__main__\":\n\t${1:main()}$0",
		"description": "Create implicitly all the code at the top level using the __name__ special variable."
	},

	"if": {
		"prefix": "if",
		"body": ["if ${1:expression}:", "\t${2:pass}"],
		"description": "Code snippet for an if statement"
	},
	"if/else": {
		"prefix": "if/else",
		"body": ["if ${1:condition}:", "\t${2:pass}", "else:", "\t${3:pass}"],
		"description": "Code snippet for an if statement with else"
	},
	"elif": {
		"prefix": "elif",
		"body": ["elif ${1:expression}:", "\t${2:pass}"],
		"description": "Code snippet for an elif"
	},
	"else": {
		"prefix": "else",
		"body": ["else:", "\t${1:pass}"],
		"description": "Code snippet for an else"
	},
	"while": {
		"prefix": "while",
		"body": ["while ${1:expression}:", "\t${2:pass}"],
		"description": "Code snippet for a while loop"
	},
	"while/else": {
		"prefix": "while/else",
		"body": ["while ${1:expression}:", "\t${2:pass}", "else:", "\t${3:pass}"],
		"description": "Code snippet for a while loop with else"
	},
	"for": {
		"prefix": "for",
		"body": ["for ${1:target_list} in ${2:expression_list}:", "\t${3:pass}"],
		"description": "Code snippet for a for loop"
	},
	"for/else": {
		"prefix": "for/else",
		"body": [
			"for ${1:target_list} in ${2:expression_list}:",
			"\t${3:pass}",
			"else:",
			"\t${4:pass}"
		],
		"description": "Code snippet for a for loop with else"
	},
	"try/except": {
		"prefix": "try/except",
		"body": ["try:", "\t${1:pass}", "except ${2:expression} as ${3:identifier}:", "\t${4:pass}"],
		"description": "Code snippet for a try/except statement"
	},
	"try/finally": {
		"prefix": "try/finally",
		"body": ["try:", "\t${1:pass}", "finally:", "\t${2:pass}"],
		"description": "Code snippet for a try/finally statement"
	},
	"try/except/else": {
		"prefix": "try/except/else",
		"body": [
			"try:",
			"\t${1:pass}",
			"except ${2:expression} as ${3:identifier}:",
			"\t${4:pass}",
			"else:",
			"\t${5:pass}"
		],
		"description": "Code snippet for a try/except/else statement"
	},
	"try/except/finally": {
		"prefix": "try/except/finally",
		"body": [
			"try:",
			"\t${1:pass}",
			"except ${2:expression} as ${3:identifier}:",
			"\t${4:pass}",
			"finally:",
			"\t${5:pass}"
		],
		"description": "Code snippet for a try/except/finally statement"
	},
	"try/except/else/finally": {
		"prefix": "try/except/else/finally",
		"body": [
			"try:",
			"\t${1:pass}",
			"except ${2:expression} as ${3:identifier}:",
			"\t${4:pass}",
			"else:",
			"\t${5:pass}",
			"finally:",
			"\t${6:pass}"
		],
		"description": "Code snippet for a try/except/else/finally statement"
	},
	"with": {
		"prefix": "with",
		"body": ["with ${1:expression} as ${2:target}:", "\t${3:pass}"],
		"description": "Code snippet for a with statement"
	},
	"def": {
		"prefix": "def",
		"body": ["def ${1:funcname}(${2:parameter_list}):", "\t${3:pass}"],
		"description": "Code snippet for a function definition"
	},
	"def(class method)": {
		"prefix": "def(class method)",
		"body": ["def ${1:funcname}(self, ${2:parameter_list}):", "\t${3:pass}"],
		"description": "Code snippet for a class method"
	},
	"def(static class method)": {
		"prefix": "def(static class method)",
		"body": ["@staticmethod", "def ${1:funcname}(${2:parameter_list}):", "\t${3:pass}"],
		"description": "Code snippet for a static class method"
	},
	"def(abstract class method)": {
		"prefix": "def(abstract class method)",
		"body": ["def ${1:funcname}(self, ${2:parameter_list}):", "\traise NotImplementedError"],
		"description": "Code snippet for an abstract class method"
	},
	"class": {
		"prefix": "class",
		"body": ["class ${1:classname}(${2:object}):", "\t${3:pass}"],
		"description": "Code snippet for a class definition"
	},
	"lambda": {
		"prefix": "lambda",
		"body": ["lambda ${1:parameter_list}: ${2:expression}"],
		"description": "Code snippet for a lambda statement"
	},
	"if(main)": {
		"prefix": "__main__",
		"body": ["if __name__ == \"__main__\":", "    ${1:pass}"],
		"description": "Code snippet for a `if __name__ == \"__main__\": ...` block"
	},
	"async/def": {
		"prefix": "async/def",
		"body": ["async def ${1:funcname}(${2:parameter_list}):", "\t${3:pass}"],
		"description": "Code snippet for an async statement"
	},
	"async/for": {
		"prefix": "async/for",
		"body": ["async for ${1:target} in ${2:iter}:", "\t${3:block}"],
		"description": "Code snippet for an async for statement"
	},
	"async/for/else": {
		"prefix": "async/for/else",
		"body": ["async for ${1:target} in ${2:iter}:", "\t${3:block}", "else:", "\t${4:block}"],
		"description": "Code snippet for an async for statement with else"
	},
	"async/with": {
		"prefix": "async/with",
		"body": ["async with ${1:expr} as ${2:var}:", "\t${3:block}"],
		"description": "Code snippet for an async with statement"
	},
	"ipdb": {
		"prefix": "ipdb",
		"body": "import ipdb; ipdb.set_trace()",
		"description": "Code snippet for ipdb debug"
	},
	"pdb": {
		"prefix": "pdb",
		"body": "import pdb; pdb.set_trace()",
		"description": "Code snippet for pdb debug"
	},
	"pudb": {
		"prefix": "pudb",
		"body": "import pudb; pudb.set_trace()",
		"description": "Code snippet for pudb debug"
	},
	"add/new/cell": {
		"prefix": "add/new/cell",
		"body": "# %%",
		"description": "Code snippet to add a new cell"
	},
	"mark/markdown": {
		"prefix": "mark/markdown",
		"body": "# %% [markdown]",
		"description": "Code snippet to add a new markdown cell"
	},
	"PDB set trace": {
		"prefix": "pdb",
		"body": "__import__('pdb').set_trace()$0"
	},
	"iPDB set trace": {
		"prefix": "ipdb",
		"body": "__import__('ipdb').set_trace()$0"
	}
}
